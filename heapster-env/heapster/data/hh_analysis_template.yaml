# Heap analysis configuration file

# Use global config as base
global_config: ./analysis.yaml
hb_state: <PATH_TO_BLOB_HB_STATE_JSON>

#############################
#    analysis settings      #
#############################
# The allocator is implemented in the firmware itself
allocator: <PATH_TO_BLOB_BIN>
# The blob is also exposed to the binary as the libc
libc: <PATH_TO_BLOB_BIN>
# Specify stdin should be pre-constrained
input_pre_constraint: False
# Specify stdin value-range (any, ascii, printable, alphanumeric, letters, zero-bytes)
input_values: any
# Specify a chunk's header size (not including any user_data overlap)
header_size: <HEADER_SIZE_VALUE>
# Specify the offset between the user's memory and the start of the chunk
mem2chunk_offset: <MEM2CHUNKOFFSET>
# Chunk fill size (number of byte read into each chunk when allocated): zero, header_size, chunk_size, <numeric value in bytes>
chunk_fill_size: zero
# Specify vulnerabilities to detect: arbitrary write, allocations over already allocated memory, allocations over non-
# heap-memory, freeing of fake chunks
vulns: <VULN_LIST>
# Specify the overflow sizes starting from prev_size
overflow_sizes: <LIST_OF_OVERFLOW_SIZES>
# Specify if you are looking only for completely arbitrary write or restricted are ok
arbitrary_write_type: <ARB_WRITE_TYPE>

#########################################
#        concretization strategies      #
#########################################
# Configuration for reading concretization strategy
read_concr_ss_sols: 16
read_concr_sc_sols: 100
read_concr_se_sols: 100
# Configuration for writes concretization strategy
write_concr_ss_sols: 16
write_concr_sc_sols: 100
write_concr_se_sols: 100

#############################
#     malloc settings       #
#############################
malloc_addr: <ADDRESSS_OF_MALLOC>
# The malloc prototype description
malloc_prototype: <MALLOC_PROTOTYPE_EXTRACTED>
# Malloc unknown arg. Ideally this set will be retrieved automatically by Slimer. 
malloc_unk_args: <MALLOC_UNK_ARGS_VALUES>
# The malloc prototype string (used for poc generation)
malloc_prototype_string: <MALLOC_PROTOTYPE_STRING>
# Specify the distinct malloc sizes; run identify_libc to identify the libc-binsizes
malloc_sizes: <LIST_OF_MALLOC_SIZES>

#############################
#       free settings       #
#############################
# The free address spotted in the blob by spengler-venkman-stantz-barret
# TODO: move this in the hb_state JSON
free_addr: <ADDRESS_OF_FREE>
# The free prototype description
free_prototype: <FREE_PROTOTYPE_EXTRACTED>
# Free unknown arg. Ideally this set will be retrieved automatically by Slimer. 
free_unk_args: <FREE_UNK_ARGS_VALUES>
# The free prototype string (used for poc generation)
free_prototype_string: <FREE_PROTOTYPE_STRING>
